## Streaming regressions and streaming recommendation engines. Examples can be found in the documentation
##
?trainMOA.MOA_regressor
?trainMOA.MOA_recommender
sum(is.na(train.data))
summary(train.data)
library(caret)
set.seed(1)
input.folder <- "~/git/github.com/KaggleCompetitionsCourse/kaggle/GiveMeSomeCredit/"
train.data <- read.csv(paste0(input.folder, "data/cs-training.csv"))
sum(is.na(train.data))
summary(train.data)
head(train.data)
str(train.data)
sum(is.na(train.data$age))
library(mi)
mdf <- missing_data.frame(train.data)
show(mdf)
3924+29731
sum(is.na(train.data))
cor(train.data)
cor(train.data)
library(corrplot)
library(corrplot)
M <- cor(train.data)
corrplot(M, method = "circle")
corrplot(M, method = "number")
url <- "http://it4biz-cenipa.cloudapp.net/pentaho/plugin/cda/api/doQuery?path=/public/APIs/ListQuantityAccidents.cda&dataAccessId=MDXListQuantityAccidents"
json <- fromJSON(url)
require(jsonlite)
url <- "http://it4biz-cenipa.cloudapp.net/pentaho/plugin/cda/api/doQuery?path=/public/APIs/ListQuantityAccidents.cda&dataAccessId=MDXListQuantityAccidents"
json <- fromJSON(url)
url2 <- "http://201.7.209.89:8080/kettle-web-integrator/runTransformation.jsp?company=IT4biz&country=Brazil&endpointPath=transformations%2FSample+rows+-+basic+example.ktr&stepOutput=OUTPUT&output_type=cda"
json <- fromJSON(url2)
json
url2 <- "http://201.7.209.89:8080/kettle-web-integrator/runTransformation.jsp?company=IT4biz&country=Brazil&endpointPath=transformations%2FSample+rows+-+basic+example.ktr&stepOutput=OUTPUT&output_type=cda"
json2 <- fromJSON(url2)
json2
head(json2)
class(json2)
url <- "http://it4biz-cenipa.cloudapp.net/pentaho/plugin/cda/api/doQuery?path=/public/APIs/ListQuantityAccidents.cda&dataAccessId=MDXListQuantityAccidents"
json <- fromJSON(url)
jsonlite?
?jsonlite
prettify(json2)
minify(json2)
require(jsonlite)
url2 <- "http://201.7.209.89:8080/kettle-web-integrator/runTransformation.jsp?company=IT4biz&country=Brazil&endpointPath=transformations%2FSample+rows+-+basic+example.ktr&stepOutput=OUTPUT&output_type=cda"
json2 <- fromJSON(url2)
json2
head(json2)
class(json2)
prettify(json2)
minify(json2)
library(tm)
library(stringi)
library(proxy)
install.packages(proxy)
install.packages("proxy")
library(proxy)
wiki <- "http://en.wikipedia.org/wiki/"
titles <- c("Integral", "Riemann_integral", "Riemann-Stieltjes_integral", "Derivative",
"Limit_of_a_sequence", "Edvard_Munch", "Vincent_van_Gogh", "Jan_Matejko",
"Lev_Tolstoj", "Franz_Kafka", "J._R._R._Tolkien")
articles <- character(length(titles))
for (i in 1:length(titles)) {
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
docs <- Corpus(VectorSource(articles))
head(docs)
library(tm)
library(stringi)
#install.packages("proxy")
library(proxy)
wiki <- "http://en.wikipedia.org/wiki/"
titles <- c("Integral", "Riemann_integral", "Riemann-Stieltjes_integral", "Derivative",
"Limit_of_a_sequence", "Edvard_Munch", "Vincent_van_Gogh", "Jan_Matejko",
"Lev_Tolstoj", "Franz_Kafka", "J._R._R._Tolkien")
articles <- character(length(titles))
for (i in 1:length(titles)) {
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
for (i in 1:length(titles)) {
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
docs[[1]]
docs2 <- tm_map(docs, function(x) stri_replace_all_regex(x, "<.+?>", " "))
docs3 <- tm_map(docs2, function(x) stri_replace_all_fixed(x, "\t", " "))
docs4 <- tm_map(docs3, PlainTextDocument)
docs5 <- tm_map(docs4, stripWhitespace)
docs6 <- tm_map(docs5, removeWords, stopwords("english"))
docs7 <- tm_map(docs6, removePunctuation)
docs8 <- tm_map(docs7, tolower)
docs8[[1]]
docsTDM <- TermDocumentMatrix(docs8)
docsTDM <- TermDocumentMatrix(docs8)
docsdissim <- dissimilarity(docsTDM, method = "cosine")
docsdissim2 <- as.matrix(docsdissim)
rownames(docsdissim2) <- titles
colnames(docsdissim2) <- titles
docsdissim2
h <- hclust(docsdissim, method = "ward")
plot(h, labels = titles, sub = "")
plot(h, labels = titles, sub = "")
library(tseries)
library(fPortfolio)
install.packages("fPortfolio")
library(tseries)
library(fPortfolio)
library(fPortfolio)
ACX<- get.hist.quote(instrument = "ACX.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(ACX)
BBVA<- get.hist.quote(instrument = "BBVA.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(BBVA)
TL5 <- get.hist.quote(instrument = "TL5.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(TL5)
ENG <- get.hist.quote(instrument = "ENG.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(ENG)
TEF <- get.hist.quote(instrument = "TEF.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(TEF)
cartera <- merge(ACX, BBVA, TL5, ENG, TEF, all = FALSE)
names(cartera)
IBEX35<- get.hist.quote(instrument = "IBEXË†", start=as.Date("2005-09-01"), quote = "AdjClose")
IBEX35<- get.hist.quote(instrument = "^IBEX", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(IBEX35)
cartera <- merge(IBEX35, ACX, BBVA, TL5, ENG, TEF, all = FALSE)
names(cartera)
names(cartera)<-c("IBEX35", "ACX", "BBVA", "TL5", "ENG", "TEF")
head(cartera,10)
plot (cartera)
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
plot (cartera)
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
plot (cartera)
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
names(cartera)<-c("ACX", "BBVA", "TL5", "ENG", "TEF")
cartera <- merge(ACX, BBVA, TL5, ENG, TEF, all = FALSE)
names(cartera)
names(cartera)<-c("ACX", "BBVA", "TL5", "ENG", "TEF")
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
cartera<-window(cartera, start = as.Date("2012-01-01"), end = as.Date("2015-09-30"))
plot(cartera, plot.type="single",)
rendimientos<-diff(log(cartera))
head(rendimientos,10)
plot(rendimientos)
summary(rendimientos)
mean(rendimientos$ACX)
moda(rendimientos$ACX)
library(modeest)
library(modeest)
mlv(rendimientos$ACX, method = "mfv")
mean(rendimientos$ACX)
sd(rendimientos$ACX)
mean(rendimientos$BBVA)
sd(rendimientos$BBVA)
mean(rendimientos$TL5)
sd(rendimientos$TL5)
mean(rendimientos$ENG)
sd(rendimientos$ENG)
mean(rendimientos$TEF)
sd(rendimientos$TEF)
mediasCar<-colMeans(rendimientos)
mediasCar
varCar<-cov(rendimientos)
varCar
w<-c(1,0,0,0,0)
mean_desv<-c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w))
w
mean_desv
mediasCar
w<-c(0,1,0,0,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,1,0,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,0,1,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,0,0,1)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
mean_desv
plot(mean_desv[,2],mean_desv[,1])
# Montecarlo
n<-15000
for (i in 1:n){
w<-c(runif(5,0,1))
#normalizo
w<-w/sum(w)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
}
mean_desv
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
# Montecarlo
n<-15000
for (i in 1:n){
w<-c(runif(5,0,1))
#normalizo
w<-w/sum(w)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
}
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
# Montecarlo
n<-100
for (i in 1:n){
w<-c(runif(5,0,1))
#normalizo
w<-w/sum(w)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
}
mean_desv
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
# Montecarlo
n<-100
for (i in 1:n){
w<-c(runif(5,0,1))
#normalizo
w<-w/sum(w)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
}
mean_desv
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
c <- 94157,54+25798,22
inv = 94157,54
inv = 94157.54
cc = 25798.22
c <- 94157.54+25798.22
c
areceber <- 20000 + 16000
t <- c + areceber
t
library(fPortfolio)
install.packages("fPortfolio")
library(fPortfolio)
install.packages("fPortfolio")
install.packages("Rsymphony")
install.packages("Rsymphony")
install.packages("fPortfolio")
install.packages("https://cran.r-project.org/src/contrib/Rsymphony_0.1-21.tar.gz", repo=NULL, type="source")
install.packages("/Users/caiomsouza/Desktop/Rsymphony_0.1-21.tar.gz", repo=NULL, type="source")
itau_invest_total = itau_acoes + itau_prevprivada + cdb_renda_fixa
bb_cc_pf = 14811.37
itau_cc_pf = 1815.62
itau_invest = 39825.11
itau_acoes = 6066.78
itau_prevprivada = 32305.48
cdb_renda_fixa = 1452.85
itau_invest_total = itau_acoes + itau_prevprivada + cdb_renda_fixa
itau_invest_total
it4biz_a_receber <- 20000 + 16000
t <- c + it4biz_a_receber
t
total_itau = itau_invest_total + itau_cc_pf
total_itau
it4biz_inv = 94157.54
it4biz_cc = 25798.22
it4biz_total <- it4biz_inv + it4biz_cc
it4biz_total
it4biz_total
it4biz_inv = 94157.54
it4biz_cc = 25798.22
it4biz_total <- it4biz_inv + it4biz_cc
it4biz_total
it4biz_a_receber <- 20000 + 16000
t <- it4biz_total + it4biz_a_receber
t
total_itau
total_geral <- total_itau + bb_cc_pf_investimento + it4biz_total
bb_cc_pf_investimento = 14811.37
total_geral <- total_itau + bb_cc_pf_investimento + it4biz_total
total_geral
total_geral_mais_receber_it4biz <- total_geral + it4biz_a_receber
total_geral_mais_receber_it4biz
previsao_apto63 <- 12 * 1530
previsao_apto63 <- 12 * 1530
previsao_office <- 12 * 1250
total_previsao_alugueis <- previsao_apto63 + previsao_office
total_previsao_alugueis
renda_mensal_previsao <- total_previsao_alugueis / 12
renda_mensal_previsao
renda_mensal_previsao_euros <- renda_mensal_previsao / 4.5
renda_mensal_previsao_euros
dif <- (750*12) - renda_mensal_previsao_euros
dif
renda_mensal_previsao_euros
dif <- 750 - renda_mensal_previsao_euros
dif
dif_12meses_euros <- dif *12
dif_12meses_euros
dif_12meses_reais <- dif_12meses_euros * 4.5
dif_12meses_reais
dif_12meses_reais_mes <- dif_12meses_reais / 12
dif_12meses_reais_mes
dif_12meses_reais
dif_12meses_reais_mes
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?zoo
library(tseries)
library(fPortfolio)
#####################Datos en red
#### Tenemos que abrir el dichoso puerto 80 en caso necesario
#setinternet2()
# Voy a bajarme 5 titulos del ibex 35
#Acerinox
ACX<- get.hist.quote(instrument = "ACX.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(ACX)
#BBVA
BBVA<- get.hist.quote(instrument = "BBVA.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(BBVA)
#TL5
TL5 <- get.hist.quote(instrument = "TL5.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(TL5)
#ENAGAS
ENG <- get.hist.quote(instrument = "ENG.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(ENG)
#TElef?nica
TEF <- get.hist.quote(instrument = "TEF.MC", start=as.Date("2005-09-01"), quote = "AdjClose")
plot(TEF)
### se podr?a bajar todo el periodo temporal completo (desde el inicio de la serie) y hacer una selecci?n utilizando windows: nombreaccion <- window(nombreaccion, start = as.Date("2011-09-01"), end = as.Date("2012-09-30"))
#ahora contruyo la cartera haciendo que coincidan las fechas con datos no nulos de todas las acciones
cartera <- merge(ACX, BBVA, TL5, ENG, TEF, all = FALSE)
names(cartera)
#como los nombres son muy largos los acorto
names(cartera)<-c("ACX", "BBVA", "TL5", "ENG", "TEF")
# muestro los primeros valores
head(cartera,10)
plot (cartera)
plot(cartera, plot.type="single",col=c("darkblue","red","darkgreen","orangered4","plum3"))
legend( 'topleft','groups',c("ACX", "BBVA", "TL5", "ENG", "TEF"), lty=c(1,1), lwd=c(2.5,2.5,2.5,2.5,2.5), col=c("darkblue","red","darkgreen","orangered4","plum3"))
#Submuestra
cartera<-window(cartera, start = as.Date("2012-01-01"), end = as.Date("2015-09-30"))
plot(cartera, plot.type="single",)
# calculo los rendimientos
rendimientos<-diff(log(cartera))
head(rendimientos,10)
plot(rendimientos)
summary(rendimientos)
mean(rendimientos$ACX)
sd(rendimientos$ACX)
mean(rendimientos$BBVA)
sd(rendimientos$BBVA)
mean(rendimientos$TL5)
sd(rendimientos$TL5)
mean(rendimientos$ENG)
sd(rendimientos$ENG)
mean(rendimientos$TEF)
sd(rendimientos$TEF)
#####
mediasCar<-colMeans(rendimientos)
mediasCar
varCar<-cov(rendimientos)
varCar
###### Construyo posibles carteras
# con un solovalor
w<-c(1,0,0,0,0)
mean_desv<-c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w))
w<-c(0,1,0,0,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,1,0,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,0,1,0)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
w<-c(0,0,0,0,1)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
mean_desv
plot(mean_desv[,2],mean_desv[,1])
# Montecarlo
n<-15000
for (i in 1:n){
w<-c(runif(5,0,1))
#normalizo
w<-w/sum(w)
mean_desv<-rbind(mean_desv,c(t(w)%*%mediasCar,sqrt(t(w)%*%varCar%*%w)))
}
mean_desv
plot(mean_desv[,2],mean_desv[,1],type = "p", col="blue", cex = 0.15, xlab = "desviaci?n t?pica", ylab="media")
####Ahora vamos a construir la frontera eficiente con el paquete portfolio
## Especificaciones de la cartera
# objeto @portfolio
#          targetReturn a numeric value specifying the target return,
#          targetRisk a numeric value specifying the target risk,
#          riskFreeRate=0 a numeric value specifying the risk free rate.
#          nFrontierPoints=50 a numeric value determining the number of points on the efficient frontier.
#
# Para darles valores a estos argumentos:
#
#setTargetReturn(spec) <- value
#setTargetRisk(spec) <- value
#setRiskFreeRate(spec) <- value
#setNFrontierPoints(spec) <- value
#spec: son las especificaciones de la cartera, podemos crear diferentes especificaciones (o diferentes carteras) con los mismos valores
espcartera<-portfolioSpec()
#espcartera es el objeto donde se guardar?n las especificaciones de mi cartera (no era necesario guardarlo con un nobre diferente)
# espcartera@portfolio$riskFreeRate<-0.005
setRiskFreeRate(espcartera)<--0.005
setNFrontierPoints(espcartera) <- 100
#Creo la frontera eficiente
Frontera <- portfolioFrontier(as.timeSeries(rendimientos),spec=espcartera )
frontierPlot(Frontera) #frontierPlot(Frontera, xlim=c(0.01, 0.03)) para darle diferente tama?o al gr?fico
minvariancePoints(Frontera, col="blue", minvariance.pch=3, cex=1.2)
monteCarloPoints(Frontera, mCsteps=500, col="cyan", cex=0.001)
# se pueden superponer diferentes valores:
# frontierPlot Plots efficient frontier,
#minvariancePoints Adds minimum variance point,
#cmlPoints Adds market portfolio,
#cmlLines Adds capital market Line,
#tangencyPoints Adds tangency portfolio point,
#tangencyLines Adds tangency line,
#equalWeightsPoints Adds point of equal weights portfolio,
#singleAssetPoints Adds points of single asset portfolios,
#twoAssetsLines Adds EF for all combinations of two assets,
#sharpeRatioLines Adds Sharpe ratio line,
#monteCarloPoints Adds randomly produced feasible portfolios,
#tailoredFrontierPlot an example for a tailored plot.
otra forma de hacerlo
plot(Frontera,risk="cov" )
1weightsSlider(Frontera)
#grafico de rendimeintos seg?n las carteras
weightsLinePlot(Frontera)
weightsPlot(Frontera)
#The function weightsPlot displays the weights composition along the frontier of a portfolio.
#The function weightedReturnsPlot displays the investment composition, i.e. the weighted returns
#along the frontier of a portfolio.
#The function covRiskBudgetsPlot displays the covariance risk budgets composition along the
#frontier of a portfolio.
solucion<-efficientPortfolio(as.timeSeries(rendimientos),spec=espcartera, constraints = "LongOnly")
solucion
#efficientPortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
#maxratioPortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
#tangencyPortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
#minriskPortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
#minvariancePortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
#maxreturnPortfolio(data, spec = portfolioSpec(), constraints = "LongOnly")
########################################################33
#OTRA FORMA DE HACERLO, con el paquete tseries
pp<-portfolio.optim(rendimientos,riskless=TRUE, rf=0.0)
pp$pw
###
### se puede calcular tambi?n el valor en riesgo y otra serie de calculos con el paquete portfolio
VER<-pfolioVaR(as.timeSeries(rendimientos))
VeR<-pfolioVaR(as.timeSeries(RCARTERA_OCT),weights = getWeights(solucion),
alpha = 0.05)
require(graphics)
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
ks.test(x, y)
# Does x come from a shifted gamma distribution with shape 3 and rate 2?
ks.test(x+2, "pgamma", 3, 2) # two-sided, exact
ks.test(x+2, "pgamma", 3, 2, exact = FALSE)
ks.test(x+2, "pgamma", 3, 2, alternative = "gr")
# test if x is stochastically larger than x2
x2 <- rnorm(50, -1)
plot(ecdf(x), xlim = range(c(x, x2)))
plot(ecdf(x2), add = TRUE, lty = "dashed")
t.test(x, x2, alternative = "g")
wilcox.test(x, x2, alternative = "g")
ks.test(x, x2, alternative = "l")
install.packages("rattle")
?rattle
rattle
rattle?
?rattle
?rattle
require(rattle)
install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
library(twitteR)
install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
install.packages("twitteR", "RCurl", "RJSONIO", "stringr")
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
consumer_key = 'lqOuACGWit5CpXNJ5AtmwyZVl'
consumer_secret = 'o6HNOKF7r91yh5mK9uIvcZBUg77daljmH63IYY9bc5whNAsThZ'
access_token = '36965900-pufEdzIa94GbXeZ2tSTs4XmH9Hv9T83l1nCV0b0G7'
access_token_secret = 'AuRIIQLys7GOsJFepjqr4IiKJREuFN3p5b7CncEd3O7H3'
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
api_key <- consumer_key # From dev.twitter.com
api_secret <- consumer_secret # From dev.twitter.com
token <- access_token # From dev.twitter.com
token_secret <- access_token_secret # From dev.twitter.com
setup_twitter_oauth(api_key, api_secret, token, token_secret)
library(XML)
site <- "http://www.zap.com.br/imoveis/sao-paulo+sao-paulo/apartamento-padrao/aluguel/?rn=104123456&pag=1"
html.raw <- htmlTreeParse(site,useInternalNodes=T, encoding="UTF-8")
xpathApply(html.raw, "//div[@class='result-ofertas']//span[@class='location']/a[1]", xmlValue)
xpathApply(html.raw, "//p[@class='local']", xmlValue)
library(XML)
library(stringr)
url.zapimoveis <- "http://www.zap.com.br/imoveis/sao-paulo+sao-paulo/apartamento-padrao/aluguel/?rn=104123456&pag=1"
raw.data <- readLines(url.zapimoveis, warn="F")
bolsa.doc  <- htmlTreeParse(raw.data, error=function(...){}, useInternalNodes = TRUE,encoding="UTF-8")
class(bolsa.doc)
bolsa.root = xmlRoot(bolsa.doc)
xmlSize(bolsa.root)
xmlSApply(bolsa.root, xmlName)
xmlSApply(bolsa.root, xmlSize)
class(xmlChildren(bolsa.root))
typeof(xmlChildren(bolsa.root))
head(url.zapimoveis)
head(bolsa.doc)
setwd("~/git/github.com/ucm/score")

# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
rules
rules <- apriori(titanic.raw, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.6),
appearance = list(rhs=c("Survived=No", "Survived=Yes"),
default="lhs"))
rules
quality(rules) <- round(quality(rules), digits=3)
rules.sorted <- sort(rules, by="lift") #sort the rules by lift inspect(rules.sorted) # see the rules
#Removing redundant rules
# find redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
library(dplyr)
library(reshape2)
library(dplyr)
quality(rules) <- round(quality(rules), digits=3)
library(dplyr)
library(reshape2)
library(ggplot2)
set.seed(10)
data <- data.frame(orderId=sample(c(1:1000), 5000, replace=TRUE),
product=sample(c('NULL','a','b','c'), 5000, replace=TRUE,
prob=c(0.15, 0.65, 0.3, 0.15)))
data
length(data)
length(data)
length(data)
set.seed(10)
data <- data.frame(orderId=sample(c(1:1000), 5000, replace=TRUE),
product=sample(c('NULL','a','b','c'), 5000, replace=TRUE,
prob=c(0.15, 0.65, 0.3, 0.15)))
length(data)
head(data)
order <- data.frame(orderId=c(1:1000),
clientId=sample(c(1:300), 1000, replace=TRUE))
gender <- data.frame(clientId=c(1:300),
gender=sample(c('male', 'female'), 300, replace=TRUE, prob=c(0.40, 0.60)))
date <- data.frame(orderId=c(1:1000),
orderdate=sample((1:100), 1000, replace=TRUE))
data
orders <- merge(data, order, by='orderId')
orders <- merge(orders, gender, by='clientId')
orders <- merge(orders, date, by='orderId')
orders <- orders[orders$product!='NULL', ]
orders$orderdate <- as.Date(orders$orderdate, origin="2012-01-01")
rm(data, date, order, gender)
orders
# processing data
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
orders <- orders %>%
group_by(clientId) %>%
mutate(frequency=n(),
recency=as.numeric(today-orderdate)) %>%
filter(orderdate==max(orderdate)) %>%
filter(orderId==max(orderId))
# exploratory analysis
ggplot(orders, aes(x=frequency)) +
theme_bw() +
scale_x_continuous(breaks=c(1:10)) +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by frequency")
ggplot(orders, aes(x=recency)) +
theme_bw() +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by recency")
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
today <- as.Date('2012-04-11', format='%Y-%m-%d')
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
orders
today <- as.Date('2012-04-11', format='%Y-%m-%d')
# processing data
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
head(orders)
# loading libraries
library(dplyr)
library(reshape2)
library(ggplot2)
# creating data sample
set.seed(10)
data <- data.frame(orderId=sample(c(1:1000), 5000, replace=TRUE),
product=sample(c('NULL','a','b','c'), 5000, replace=TRUE,
prob=c(0.15, 0.65, 0.3, 0.15)))
head(data)
order <- data.frame(orderId=c(1:1000),
clientId=sample(c(1:300), 1000, replace=TRUE))
gender <- data.frame(clientId=c(1:300),
gender=sample(c('male', 'female'), 300, replace=TRUE, prob=c(0.40, 0.60)))
date <- data.frame(orderId=c(1:1000),
orderdate=sample((1:100), 1000, replace=TRUE))
data
head(data)
orders <- merge(data, order, by='orderId')
orders <- merge(orders, gender, by='clientId')
orders <- merge(orders, date, by='orderId')
orders <- orders[orders$product!='NULL', ]
orders$orderdate <- as.Date(orders$orderdate, origin="2012-01-01")
rm(data, date, order, gender)
head(orders)
today <- as.Date('2012-04-11', format='%Y-%m-%d')
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
orders <- orders %>%
group_by(clientId) %>%
mutate(frequency=n(),
recency=as.numeric(today-orderdate)) %>%
filter(orderdate==max(orderdate)) %>%
filter(orderId==max(orderId))
ggplot(orders, aes(x=frequency)) +
theme_bw() +
scale_x_continuous(breaks=c(1:10)) +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by frequency")
ggplot(orders, aes(x=recency)) +
theme_bw() +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by recency")
orders.segm <- orders %>%
mutate(segm.freq=ifelse(between(frequency, 1, 1), '1',
ifelse(between(frequency, 2, 2), '2',
ifelse(between(frequency, 3, 3), '3',
ifelse(between(frequency, 4, 4), '4',
ifelse(between(frequency, 5, 5), '5', '>5')))))) %>%
mutate(segm.rec=ifelse(between(recency, 0, 6), '0-6 days',
ifelse(between(recency, 7, 13), '7-13 days',
ifelse(between(recency, 14, 19), '14-19 days',
ifelse(between(recency, 20, 45), '20-45 days',
ifelse(between(recency, 46, 80), '46-80 days', '>80 days')))))) %>%
# creating last cart feature
mutate(cart=paste(ifelse(a!=0, 'a', ''),
ifelse(b!=0, 'b', ''),
ifelse(c!=0, 'c', ''), sep='')) %>%
arrange(clientId)
# defining order of boundaries
orders.segm$segm.freq <- factor(orders.segm$segm.freq, levels=c('>5', '5', '4', '3', '2', '1'))
orders.segm$segm.rec <- factor(orders.segm$segm.rec, levels=c('>80 days', '46-80 days', '20-45 days', '14-19 days', '7-13 days', '0-6 days'))
lcg <- orders.segm %>%
group_by(segm.rec, segm.freq) %>%
summarise(quantity=n()) %>%
mutate(client='client') %>%
ungroup()
lcg.matrix <- dcast(lcg, segm.freq ~ segm.rec, value.var='quantity', fun.aggregate=sum)
ggplot(lcg, aes(x=client, y=quantity, fill=quantity)) +
theme_bw() +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', alpha=0.6) +
geom_text(aes(y=max(quantity)/2, label=quantity), size=4) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids")
ggplot(lcg.sub, aes(x=client, y=quantity, fill=gender)) +
theme_bw() +
scale_fill_brewer(palette='Set1') +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', position='fill' , alpha=0.6) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids by gender (propotion)")
lcg.sub <- orders.segm %>%
group_by(gender, cart, segm.rec, segm.freq) %>%
summarise(quantity=n()) %>%
mutate(client='client') %>%
ungroup()
ggplot(lcg.sub, aes(x=client, y=quantity, fill=gender)) +
theme_bw() +
scale_fill_brewer(palette='Set1') +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', position='fill' , alpha=0.6) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids by gender (propotion)")
ggplot(lcg.sub, aes(x=gender, y=quantity, fill=cart)) +
theme_bw() +
scale_fill_brewer(palette='Set1') +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', position='fill' , alpha=0.6) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids by gender and last cart (propotion)")
setwd("~/git/Bitbucket/ucm/COMPLEMENTOS_DE_FORMACION_EN_TECNICAS_DE_MINERIA_DE_DATOS/visitantes")
setwd("~/git/Bitbucket/ucm/COMPLEMENTOS_DE_FORMACION_EN_TECNICAS_DE_MINERIA_DE_DATOS/visitantes")
install.packages("forecast")
install.packages("tseries")
require(forecast)
require(tseries)
dat <- read.csv(file="serie_ejemplo.csv",head=TRUE,sep=";")
dat
View(dat)
str(dat)
summary(dat)
hist(dat$um)
hist(dat$um, freq = F, ann=F, col = "lightblue")
hist(dat$um)
hist(dat$um, freq = F, ann=F, col = "lightblue")
hist(dat$um, freq = T, ann=F, col = "lightblue")
hist(dat$um, freq = T, ann=T, col = "lightblue")
plot(dat)
fechas <- as.Date(dat$fecha, format="%YM%D")
fechas
fechas <- as.Date(dat$fecha, format="Y%M%D")
fechas
x <- dat$um
serie <- ts(x, start=1999, frequency=12)
plot(serie)
descomposicion <- (decompose(serie, type = c("additive")))
plot(descomposicion)
acf(serie)
pacf(serie)
modelo <- forecast.Arima(auto.arima(serie,d=NA,D=NA,max.P = 3, max.Q =3, max.order = 9, trace = TRUE))
plot.forecast(modelo, type="l")
summary(modelo)
residuos <- residuals(modelo)
hist(residuos, freq = F, ann=F, col = "lightblue")
curve(dnorm(x, mean(residuos), sd(residuos)), col=2, add=TRUE)
acf(residuos)
pacf(residuos)
dat <- read.csv(file="it4biz/datos-it4biz-faturacion-organizado.csv",head=TRUE,sep=";")
dat
View(dat)
dat <- read.csv(file="it4biz/datos-it4biz-faturacion-organizado.csv",head=TRUE,sep=",")
dat
View(dat)
str(dat)
summary(dat)
summary(dat$valor_servico, dat$quantidade)
summary(dat$valor_servico)
summary(dat)
hist(dat$valor_servico)
hist(dat$valor_servico)
summary(dat)
hist(dat$valor_servico)
hist(dat$quantidade)
hist(dat$quantidade, freq = T, ann=T, col = "lightblue")
plot(dat)
datos.nuevo <- dat
datos.nuevo$ano <- NULL
datos.nuevo$mes <- NULL
datos.nuevo$valor_servico <- NULL
plot(dat)
plot(datos.nuevo)
x <- datos.nuevo$quantidade
serie <- ts(x, start=1999, frequency=12)
plot(serie)
title(main="serie", col.main="red", font.main=4)
title(xlab = "Tiempo", col.lab="red")
plot(serie)
descomposicion <- (decompose(serie, type = c("additive")))
plot(descomposicion)
acf(serie)
pacf(serie)
modelo <- forecast.Arima(auto.arima(serie,d=NA,D=NA,max.P = 3, max.Q =3, max.order = 9, trace = TRUE))
plot.forecast(modelo, type="l")
summary(modelo)
hist(residuos, freq = F, ann=F, col = "lightblue")
curve(dnorm(x, mean(residuos), sd(residuos)), col=2, add=TRUE)
acf(residuos)
pacf(residuos)
hist(dat$valor_servico)
dat <- read.csv(file="it4biz/datos-it4biz-faturacion-organizado-valor-tratado.csv",head=TRUE,sep=",")
dat
View(dat)
summary(dat)
hist(dat$valor_servico)
hist(dat$valor_servico, freq = T, ann=T, col = "lightblue")
datos.nuevo <- dat
datos.nuevo$ano <- NULL
datos.nuevo$mes <- NULL
datos.nuevo$quantidade <- NULL
plot(datos.nuevo)
x <- datos.nuevo$valor_servico
serie <- ts(x, start=1999, frequency=12)
plot(serie)
serie <- ts(x, start=2008, frequency=12)
plot(serie)
title(main="serie", col.main="red", font.main=4)
title(xlab = "Tiempo", col.lab="red")
plot(serie)
descomposicion <- (decompose(serie, type = c("additive")))
plot(descomposicion)
acf(serie)
pacf(serie)
modelo <- forecast.Arima(auto.arima(serie,d=NA,D=NA,max.P = 3, max.Q =3, max.order = 9, trace = TRUE))
plot.forecast(modelo, type="l")
summary(modelo)
residuos <- residuals(modelo)
hist(residuos, freq = F, ann=F, col = "lightblue")
curve(dnorm(x, mean(residuos), sd(residuos)), col=2, add=TRUE)
acf(residuos)
pacf(residuos)
dat <- read.csv(file="it4biz/datos-it4biz-faturacion-organizado.csv",head=TRUE,sep=",")
dat
View(dat)
str(dat)
summary(dat)
hist(dat$quantidade)
hist(dat$quantidade, freq = T, ann=T, col = "lightblue")
datos.nuevo <- dat
datos.nuevo$ano <- NULL
datos.nuevo$mes <- NULL
datos.nuevo$valor_servico <- NULL
plot(datos.nuevo)
#fechas <- as.Date(dat$fecha, format="Y%M%D")
#fechas
x <- datos.nuevo$quantidade
serie <- ts(x, start=2008, frequency=12)
plot(serie)
title(main="serie", col.main="red", font.main=4)
title(xlab = "Tiempo", col.lab="red")
plot(serie)
#col="blue", bty="1")
descomposicion <- (decompose(serie, type = c("additive")))
plot(descomposicion)
acf(serie)
pacf(serie)
modelo <- forecast.Arima(auto.arima(serie,d=NA,D=NA,max.P = 3, max.Q =3, max.order = 9, trace = TRUE))
plot.forecast(modelo, type="l")
summary(modelo)
residuos <- residuals(modelo)
hist(residuos, freq = F, ann=F, col = "lightblue")
curve(dnorm(x, mean(residuos), sd(residuos)), col=2, add=TRUE)
acf(residuos)
pacf(residuos)
dat
lm(dat$quantidade ~ dat$valor_servico)
lm <- lm(dat$quantidade ~ dat$valor_servico)
lm
plot(lm)
glm <- glm(dat$quantidade ~ dat$valor_servico)
plot(glm)
data(airpass, package = "faraway")
install.packages("faraway")
install.packages("faraway")
data(airpass, package = "faraway")
plot(pass ~ year, airpass, type="l", ylab="Log(Passengers"))
plot(pass ~ year, airpass, type="l", ylab="Log(Passengers)")
lmod <- lm(log(pass) ~ year, airpass)
lines(exp(predict(lmod)) ~ year, airpass)
lagdf <- embed(log(airpass$pass),14)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
dat <- read.csv(file="it4biz/datos-it4biz-faturacion-organizado-valor-tratado.csv",head=TRUE,sep=",")
dat
plot(quantidade ~ ano, dat, type="l", ylab="Log(Quantidade)")
plot(quantidade ~ anomes, dat, type="l", ylab="Log(Quantidade)")
lmod <- lm(log(quantidade) ~ anomes, dat)
lines(exp(predict(lmod)) ~ anomes, dat)
lagdf <- embed(log(dat$quantidade),14)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
setwd("~/Users/caiomsouza/git/Bitbucket/eagle-dm")
setwd("/Users/caiomsouza/git/Bitbucket/eagle-dm")
setwd("/Users/caiomsouza/git/Bitbucket/eagle-dm")
dat <- read.csv(file="dat/datos-it4biz-faturacion-organizado-valor-tratado.csv",head=TRUE,sep=",")
dat
dat <- read.csv(file="dat/datos-it4biz-faturacion-organizado-valor-tratado.csv",head=TRUE,sep=",")
dat
plot(quantidade ~ ano, dat, type="l", ylab="Log(Quantidade)")
plot(quantidade ~ anomes, dat, type="l", ylab="Log(Quantidade)")
lmod <- lm(log(quantidade) ~ anomes, dat)
lines(exp(predict(lmod)) ~ anomes, dat)
lagdf <- embed(log(dat$quantidade),14)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
data(airpass, package = "faraway")
plot(pass ~ year, airpass, type="l", ylab="Log(Passengers)")
lmod <- lm(log(pass) ~ year, airpass)
lines(exp(predict(lmod)) ~ year, airpass)
lagdf <- embed(log(airpass$pass),14)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
lagdf <- embed(log(dat$quantidade),40)
dat <- read.csv(file="dat/datos-it4biz-faturacion-organizado-valor-tratado.csv",head=TRUE,sep=",")
dat
plot(quantidade ~ ano, dat, type="l", ylab="Log(Quantidade)")
plot(quantidade ~ anomes, dat, type="l", ylab="Log(Quantidade)")
lmod <- lm(log(quantidade) ~ anomes, dat)
lines(exp(predict(lmod)) ~ anomes, dat)
lagdf <- embed(log(dat$quantidade),40)
lagdf <- embed(log(dat$quantidade),40)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
colnames(lagdf) <- c("y", paste0("lag", 1:39))
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
lagdf <- embed(log(dat$quantidade),14)
colnames(lagdf) <- c("y", paste0("lag", 1:13))
lagdf <- data.frame(lagdf)
armod <- lm(y ~ lag1 + lag12 + lag13, data.frame(lagdf))
summary(armod)
library(dplyr)
library(reshape2)
library(ggplot2)
set.seed(10)
data <- data.frame(orderId=sample(c(1:1000), 5000, replace=TRUE),
product=sample(c('NULL','a','b','c'), 5000, replace=TRUE,
prob=c(0.15, 0.65, 0.3, 0.15)))
head(data)
order <- data.frame(orderId=c(1:1000),
clientId=sample(c(1:300), 1000, replace=TRUE))
gender <- data.frame(clientId=c(1:300),
gender=sample(c('male', 'female'), 300, replace=TRUE, prob=c(0.40, 0.60)))
date <- data.frame(orderId=c(1:1000),
orderdate=sample((1:100), 1000, replace=TRUE))
head(data)
orders <- merge(data, order, by='orderId')
orders <- merge(orders, gender, by='clientId')
orders <- merge(orders, date, by='orderId')
orders <- orders[orders$product!='NULL', ]
orders$orderdate <- as.Date(orders$orderdate, origin="2012-01-01")
rm(data, date, order, gender)
head(orders)
# reporting date
today <- as.Date('2012-04-11', format='%Y-%m-%d')
# processing data
orders <- dcast(orders, orderId + clientId + gender + orderdate ~ product, value.var='product', fun.aggregate=length)
orders <- orders %>%
group_by(clientId) %>%
mutate(frequency=n(),
recency=as.numeric(today-orderdate)) %>%
filter(orderdate==max(orderdate)) %>%
filter(orderId==max(orderId))
# exploratory analysis
ggplot(orders, aes(x=frequency)) +
theme_bw() +
scale_x_continuous(breaks=c(1:10)) +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by frequency")
ggplot(orders, aes(x=recency)) +
theme_bw() +
geom_bar(alpha=0.6, binwidth=1) +
ggtitle("Dustribution by recency")
orders.segm <- orders %>%
mutate(segm.freq=ifelse(between(frequency, 1, 1), '1',
ifelse(between(frequency, 2, 2), '2',
ifelse(between(frequency, 3, 3), '3',
ifelse(between(frequency, 4, 4), '4',
ifelse(between(frequency, 5, 5), '5', '>5')))))) %>%
mutate(segm.rec=ifelse(between(recency, 0, 6), '0-6 days',
ifelse(between(recency, 7, 13), '7-13 days',
ifelse(between(recency, 14, 19), '14-19 days',
ifelse(between(recency, 20, 45), '20-45 days',
ifelse(between(recency, 46, 80), '46-80 days', '>80 days')))))) %>%
# creating last cart feature
mutate(cart=paste(ifelse(a!=0, 'a', ''),
ifelse(b!=0, 'b', ''),
ifelse(c!=0, 'c', ''), sep='')) %>%
arrange(clientId)
# defining order of boundaries
orders.segm$segm.freq <- factor(orders.segm$segm.freq, levels=c('>5', '5', '4', '3', '2', '1'))
orders.segm$segm.rec <- factor(orders.segm$segm.rec, levels=c('>80 days', '46-80 days', '20-45 days', '14-19 days', '7-13 days', '0-6 days'))
lcg <- orders.segm %>%
group_by(segm.rec, segm.freq) %>%
summarise(quantity=n()) %>%
mutate(client='client') %>%
ungroup()
lcg.matrix <- dcast(lcg, segm.freq ~ segm.rec, value.var='quantity', fun.aggregate=sum)
ggplot(lcg, aes(x=client, y=quantity, fill=quantity)) +
theme_bw() +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', alpha=0.6) +
geom_text(aes(y=max(quantity)/2, label=quantity), size=4) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids")
lcg.sub <- orders.segm %>%
group_by(gender, cart, segm.rec, segm.freq) %>%
summarise(quantity=n()) %>%
mutate(client='client') %>%
ungroup()
ggplot(lcg.sub, aes(x=client, y=quantity, fill=gender)) +
theme_bw() +
scale_fill_brewer(palette='Set1') +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', position='fill' , alpha=0.6) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids by gender (propotion)")
ggplot(lcg.sub, aes(x=gender, y=quantity, fill=cart)) +
theme_bw() +
scale_fill_brewer(palette='Set1') +
theme(panel.grid = element_blank())+
geom_bar(stat='identity', position='fill' , alpha=0.6) +
facet_grid(segm.freq ~ segm.rec) +
ggtitle("LifeCycle Grids by gender and last cart (propotion)")
setwd("/Users/caiomsouza/git/Bitbucket/ucm/COMPLEMENTOS_DE_FORMACION_EN_TECNICAS_DE_MINERIA_DE_DATOS/tareas-entregar/trabajo-31enero16")
paises <- read.csv(file="DatosPaises.xlsx",head=TRUE,sep=",")
paises <- read.csv(file="DatosPaises.csv",head=TRUE,sep=",")
paises
normalizar <- scale(paises)
normalizar <- scale(paises, na.rm = TRUE)
paises.valores <- paises
paises.valores$Pais <- NULL
paises.valores
paises.valores
paises.valores.normalizar <- scale(paises.valores, na.rm = TRUE)
paises.valores.normalizar <- scale(paises.valores)
paises.valores.normalizar
cor(paises.valores.normalizar)
paises.cor <- cor(paises.valores.normalizar)
plot(paises.cor)
View(paises.cor)
View(paises.cor)
